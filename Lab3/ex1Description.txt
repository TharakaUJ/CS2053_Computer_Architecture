Given a vector, A, of 3*N elements, obtain a new vector, B, of N elements, so that each
element of B is the absolute value of the sum of a triplet of consecutive elements of A. For
example:
B[0] = |A[0]+A[1]+A[2]|, B[1] = |A[3]+A[4]+A[5]|, ...
Write a RISC-V assembly program called Triplets.S (the program must confirm to the
RISC-V calling convention)
The main program implements the computation of B, according to the following high level
pseudo-code:
#define N 4
int A[3*N] = {a list of 3*N values};
int B[N];
int i, j=0;
void main (void)
{
for (i=0; i<N; i++){
B[i] = res_triplet(A,j);
j=j+3;
}
}
Function res_triplet returns the absolute value of the sum of 3 consecutive
elements of the vector V, starting at position p. It is implemented according to the
specification given by the following high-level pseudo-code:
int res_triplet(int V[ ], int pos)
{
int i, sum=0;
for (i=0; i<3; i++)
sum = sum + V[pos+i];
sum=abs(sum);
return sum;
}
Function abs(int x) returns the absolute value of its input argument.
